// <auto-generated />
using System;
using FinalProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProject.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221111210138_SeedDb")]
    partial class SeedDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FinalProject.Infrastructure.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Theatre"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Movie"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Charity"
                        });
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventOrganiser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Interested")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("VenueId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2dd87ce-43ac-46d6-a01e-6c1e11c14a51"),
                            CategoryId = 1,
                            Date = new DateTime(2022, 11, 11, 23, 1, 38, 156, DateTimeKind.Local).AddTicks(1206),
                            Description = "Sunami EP promo live, be there. ",
                            EventOrganiser = "REAL BAY SH*T",
                            ImageUrl = "https://f4.bcbits.com/img/a0705911045_10.jpg",
                            Interested = 0,
                            Likes = 0,
                            Name = "Sunami Live Concert",
                            Price = 20m,
                            VenueId = new Guid("b83b35c8-1c9d-4404-a7c9-a76cc9617719")
                        },
                        new
                        {
                            Id = new Guid("05a0ff55-332f-4048-9378-0e4c9b614e2b"),
                            CategoryId = 2,
                            Date = new DateTime(2022, 11, 11, 23, 1, 38, 156, DateTimeKind.Local).AddTicks(1257),
                            Description = "The puppets show is in town, bring your kids for a fun spectacle.",
                            EventOrganiser = "Sofia Theatre",
                            ImageUrl = "http://theatre.art.bg/img/photos/BIG14008272141zabokyt%20(1).jpg",
                            Interested = 0,
                            Likes = 0,
                            Name = "The frog king",
                            Price = 10m,
                            VenueId = new Guid("4611cec5-9233-4c0c-9201-529b9af6235d")
                        },
                        new
                        {
                            Id = new Guid("184862cb-2647-4945-9556-43ea99436df2"),
                            CategoryId = 3,
                            Date = new DateTime(2022, 11, 11, 23, 1, 38, 156, DateTimeKind.Local).AddTicks(1264),
                            Description = "The premiere of the new Batman coming to this fall.",
                            EventOrganiser = "Matt Reeves",
                            ImageUrl = "https://m.media-amazon.com/images/M/MV5BMDdmMTBiNTYtMDIzNi00NGVlLWIzMDYtZTk3MTQ3NGQxZGEwXkEyXkFqcGdeQXVyMzMwOTU5MDk@._V1_.jpg",
                            Interested = 0,
                            Likes = 0,
                            Name = "The Batman (2022) Premiere",
                            Price = 12m,
                            VenueId = new Guid("b80248ba-4607-498e-bbd5-afd4f7221979")
                        },
                        new
                        {
                            Id = new Guid("093a12b3-2021-45a2-8f3c-304ef44aa2db"),
                            CategoryId = 4,
                            Date = new DateTime(2022, 11, 11, 23, 1, 38, 156, DateTimeKind.Local).AddTicks(1275),
                            Description = "This is a charity even for the Make-a-wish foundation hosted by JPMorgan.",
                            EventOrganiser = "JPMorgan",
                            ImageUrl = "https://mma.prnewswire.com/media/444000/Make_A_Wish_Logo.jpg?p=twitter",
                            Interested = 0,
                            Likes = 0,
                            Name = "Charity",
                            Price = 0m,
                            VenueId = new Guid("197ee165-a4da-46d7-893a-f1cefc6ddc96")
                        });
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9544756e-d3c1-4965-bf8d-8eb7ecaabf9c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4038bce-b830-4d21-ba4e-4442541236b2",
                            Email = "guest1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest1@gmail.com",
                            NormalizedUserName = "guest1",
                            PasswordHash = "AQAAAAEAACcQAAAAENayYFvnsmlx26waZsLmAkJPH9tgZpYUpX6/emQC8fFujwBgiq2mpuOju7E8/0So4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f8b9a77-e9c8-4d30-84ed-116c15e0af53",
                            TwoFactorEnabled = false,
                            UserName = "guest1"
                        },
                        new
                        {
                            Id = "ebc5234d-a9cb-4ce0-9b9e-590b2e66d374",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3e76fbf-fc24-48d5-9e12-b10528d41ec2",
                            Email = "guest2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest2@gmail.com",
                            NormalizedUserName = "guest2",
                            PasswordHash = "AQAAAAEAACcQAAAAEG1IYnse7aqN2Lvi7xXapIKluWlsmIQDYyHwnY+U5tsAP8BPQkoPWp7SruGcMpXZ8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5638030c-0a87-44c2-9d59-6e5dc01067a5",
                            TwoFactorEnabled = false,
                            UserName = "guest2"
                        },
                        new
                        {
                            Id = "88fad1b1-c2c5-4e2b-ba98-16c87d7d01ca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e09c14be-1036-4d6a-afd3-7e29c9efffac",
                            Email = "guest3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest3@gmail.com",
                            NormalizedUserName = "guest3",
                            PasswordHash = "AQAAAAEAACcQAAAAECmqvUP10htuGRpJV/f4E4mzTCjWpU2MjLo01yu8B+Bh2QO9ErCehBY4pQmmr+ZVjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "505793c9-ef2a-4124-994a-699b98ca6a19",
                            TwoFactorEnabled = false,
                            UserName = "guest3"
                        },
                        new
                        {
                            Id = "d58dadb8-e031-41e7-875e-da7378709cb5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebe2735c-fb69-4408-8a74-ef0b5a2096d4",
                            Email = "admin1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin1@gmail.com",
                            NormalizedUserName = "admin1",
                            PasswordHash = "AQAAAAEAACcQAAAAEDup4CYvMXeJPrWdM1VhJn5meTFwjhVvCOrs7B0rwkPVFCobMk3SsmOjXDjM6CuZtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f5620c3-c4b8-4dd0-800b-6c350c4bc5b1",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        });
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.UserEvent", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("UserEvent");
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.UserTicket", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("UserTicket");
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b83b35c8-1c9d-4404-a7c9-a76cc9617719"),
                            Capacity = 200,
                            City = "Varna",
                            ImageUrl = "",
                            Name = "Hale3"
                        },
                        new
                        {
                            Id = new Guid("4611cec5-9233-4c0c-9201-529b9af6235d"),
                            Capacity = 500,
                            City = "Sofia",
                            ImageUrl = "",
                            Name = "Sofia Puppet Theatre"
                        },
                        new
                        {
                            Id = new Guid("b80248ba-4607-498e-bbd5-afd4f7221979"),
                            Capacity = 1500,
                            City = "Plovdiv",
                            ImageUrl = "",
                            Name = "CinemaCity"
                        },
                        new
                        {
                            Id = new Guid("197ee165-a4da-46d7-893a-f1cefc6ddc96"),
                            Capacity = 5000,
                            City = "Burgas",
                            ImageUrl = "",
                            Name = "Culture Home Burgas"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.Event", b =>
                {
                    b.HasOne("FinalProject.Infrastructure.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Infrastructure.Data.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.UserEvent", b =>
                {
                    b.HasOne("FinalProject.Infrastructure.Data.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Infrastructure.Data.User", "User")
                        .WithMany("UsersEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.UserTicket", b =>
                {
                    b.HasOne("FinalProject.Infrastructure.Data.Ticket", "Ticket")
                        .WithMany("UserTickets")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Infrastructure.Data.User", "User")
                        .WithMany("UserTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FinalProject.Infrastructure.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FinalProject.Infrastructure.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Infrastructure.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FinalProject.Infrastructure.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.Event", b =>
                {
                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.Ticket", b =>
                {
                    b.Navigation("UserTickets");
                });

            modelBuilder.Entity("FinalProject.Infrastructure.Data.User", b =>
                {
                    b.Navigation("UserTickets");

                    b.Navigation("UsersEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
